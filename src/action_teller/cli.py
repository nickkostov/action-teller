#!/usr/bin/env python3
import click
from pathlib import Path

# import CLI arguments
from .command_arguments.path import path_argument
from .command_arguments.out import out_option
from .command_arguments.single import single_option
from .command_arguments.confluence import confluence_option
from .command_arguments.llm_summary import llm_summary_option

# utils
from .utils.file_finder import find_action_files
from .utils.yaml_loader import parse_action_yaml
from .utils.ollama import ollama_summarize

# renderers
from .renderers import branding, inputs, outputs, runs, permissions, env, defaults


@click.command(context_settings=dict(help_option_names=['-h', '--help']))
@path_argument
@out_option
@single_option
@confluence_option
@llm_summary_option
@click.version_option(message="action-teller %(version)s")
def cli(path, out, single, confluence, llm_summary, llm_model):
    """Generate Markdown docs from `action.yml`/`action.yaml`."""

    out.mkdir(parents=True, exist_ok=True)
    files = find_action_files(path)
    if not files:
        click.echo(f"No action.yml/.yaml found under: {path}", err=True)
        raise SystemExit(2)

    docs = []
    for f in files:
        try:
            data = parse_action_yaml(f)
        except Exception as e:
            click.echo(f"ERROR parsing {f}: {e}", err=True)
            continue

        md = []
        name = data.get("name", f.parent.name)
        desc = data.get("description", "")
        author = data.get("author", "")

        md.append(f"# {name}\n")
        if desc: md.append(desc + "\n")

        if llm_summary:
            summary = ollama_summarize(data, model=llm_model)
            if summary:
                md.append(f"> {summary}\n")

        md.append(f"**File:** `{f}`  ")
        if author: md.append(f"**Author:** `{author}`  ")
        md.append("\n## Branding\n" + branding.render(data.get("branding", {})))
        md.append("\n## Inputs\n" + inputs.render(data.get("inputs", {})))
        md.append("\n## Outputs\n" + outputs.render(data.get("outputs", {})))
        md.append("\n## Runs\n" + runs.render(data.get("runs", {})))
        md.append("\n## Permissions\n" + permissions.render(data.get("permissions", {})))
        md.append("\n## Env\n" + env.render(data.get("env", {})))
        md.append("\n## Defaults\n" + defaults.render(data.get("defaults", {})))
        md.append("\n---\n_Generated by action-teller_")
        docs.append((f, "\n".join(md)))

    if single:
        combined = ["# GitHub Actions — Documentation Index", ""]
        for f, md in docs:
            try:
                rel = f.relative_to(path)
            except Exception:
                rel = f.name
            combined.append(f"## {rel}\n")
            combined.append(md + "\n")
        (out / "README.md").write_text("\n".join(combined), encoding="utf-8")
        click.echo(f"Wrote {out / 'README.md'}")
    else:
        index_lines = ["# GitHub Actions — Documentation Index", ""]
        for f, md in docs:
            base = f.parent.name if f.parent.name not in ('', '.') else f.stem
            md_name = f"{base}.md"
            (out / md_name).write_text(md, encoding="utf-8")
            index_lines.append(f"- [{base}]({md_name}) — `{f}`")
        (out / "INDEX.md").write_text("\n".join(index_lines), encoding="utf-8")
        click.echo(f"Wrote {out / 'INDEX.md'} and {len(docs)} doc file(s) to {out}")
